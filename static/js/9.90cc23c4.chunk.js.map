{"version":3,"sources":["components/pin.tsx","screens/projectList/list.tsx","screens/projectList/search-panel.tsx","screens/projectList/index.tsx"],"names":["Pin","checked","onCheckedChange","restProps","count","value","onChange","num","List","users","props","editProject","useEditProject","useProjectsQueryKey","mutate","pagination","columns","title","disabled","render","project","pin","id","sorter","a","b","name","localeCompare","to","String","dataIndex","find","user","personId","created","dayjs","format","More","startEdit","useProjectModal","deleteProject","useDeleteProject","overlay","Item","onClick","type","Modal","confirm","content","okText","cancelText","onOk","confirmDeleteProject","SearchPanel","param","setParam","style","marginBottom","layout","placeholder","evt","target","defaultOptionName","ProjectListScreen","React","memo","useDocumentTitle","useProjectsSearchParams","debouncedName","useDebounce","useProjects","isLoading","error","list","data","useUsers","open","between","opacity","borderRadius","size","loading","dataSource"],"mappings":"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","file":"static/js/9.90cc23c4.chunk.js","sourcesContent":["import { Rate } from \"antd\";\nimport React from \"react\";\n\ninterface PinProps extends React.ComponentProps<typeof Rate> {\n  checked: boolean;\n  onCheckedChange?: (checked: boolean) => void;\n}\nexport const Pin = ({ checked, onCheckedChange, ...restProps }: PinProps) => {\n  return (\n    <Rate\n      count={1}\n      value={checked ? 1 : 0}\n      onChange={(num) => onCheckedChange?.(!!num)}\n      {...restProps}\n    ></Rate>\n  );\n};\n","import { Project } from \"types/project\";\nimport { User } from \"types/user\";\nimport { Dropdown, Menu, Modal, Table, TableProps } from \"antd\";\nimport dayjs from \"dayjs\";\nimport { Link } from \"react-router-dom\";\nimport { Pin } from \"components/pin\";\nimport { useDeleteProject, useEditProject } from \"utils/project\";\nimport { ButtonNoPadding } from \"components/lib\";\nimport { useProjectModal, useProjectsQueryKey } from \"./util\";\ninterface ListProp extends TableProps<Project> {\n  users: User[];\n  refresh?: () => void;\n}\nexport const List = ({ users, ...props }: ListProp) => {\n  const { mutate: editProject } = useEditProject(useProjectsQueryKey());\n\n  //ÊüØÈáåÂåñ\n  const pinProject = (id: number) => (pin: boolean) => editProject({ id, pin });\n\n  return (\n    <Table\n      pagination={false}\n      columns={[\n        {\n          title: <Pin checked={true} disabled={true} />,\n          render(value, project) {\n            return (\n              <Pin\n                checked={project.pin}\n                onCheckedChange={pinProject(project.id)}\n              />\n            );\n          },\n        },\n        {\n          title: \"ÂêçÁß∞\",\n          sorter: (a, b) => a.name.localeCompare(b.name),\n          render(value, project) {\n            return <Link to={String(project.id)}>{project.name}</Link>;\n          },\n        },\n        {\n          title: \"ÈÉ®Èó®\",\n          dataIndex: \"organization\",\n        },\n        {\n          title: \"Ë¥üË¥£‰∫∫\",\n          render(value, project) {\n            return (\n              <span>\n                {users.find((user) => user.id === project.personId)?.name ||\n                  \"Êú™Áü•\"}\n              </span>\n            );\n          },\n        },\n        {\n          title: \"ÂàõÂª∫Êó∂Èó¥\",\n          render(value, project) {\n            return (\n              <span>\n                {project.created\n                  ? dayjs(project.created).format(\"YYYY-MM-DD\")\n                  : \"Êó†\"}\n              </span>\n            );\n          },\n        },\n        {\n          render(value, project) {\n            return <More project={project} />;\n          },\n        },\n      ]}\n      {...props}\n    ></Table>\n  );\n};\n\nconst More = ({ project }: { project: Project }) => {\n  const { startEdit } = useProjectModal();\n  const editProject = (id: number) => () => startEdit(id);\n  const { mutate: deleteProject } = useDeleteProject(useProjectsQueryKey());\n  const confirmDeleteProject = (id: number) => {\n    Modal.confirm({\n      title: \"üôÉ‰Ω†Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™È°πÁõÆüê¥Ôºü\",\n      content: \"üò°Âà´ÊÄ™ÊàëÊ≤°ÊèêÈÜí‰Ω†\",\n      okText: \"üò∂Á°ÆÂÆö\",\n      cancelText: \"üòÖÁÆó‰∫ÜÁÆó‰∫Ü\",\n      onOk() {\n        deleteProject({ id });\n      },\n    });\n  };\n\n  return (\n    <Dropdown\n      overlay={\n        <Menu>\n          <Menu.Item key={\"edit\"}>\n            <ButtonNoPadding onClick={editProject(project.id)} type={\"link\"}>\n              ÁºñËæëÈ°πÁõÆ\n            </ButtonNoPadding>\n          </Menu.Item>\n          <Menu.Item key={\"delete\"}>\n            <ButtonNoPadding\n              onClick={() => confirmDeleteProject(project.id)}\n              type={\"link\"}\n            >\n              Âà†Èô§È°πÁõÆ\n            </ButtonNoPadding>\n          </Menu.Item>\n        </Menu>\n      }\n    >\n      <ButtonNoPadding type={\"link\"}>...</ButtonNoPadding>\n    </Dropdown>\n  );\n};\n","import { Form, Input } from \"antd\";\nimport { UserSelect } from \"components/user-select\";\nimport { Project } from \"types/project\";\nimport { User } from \"types/user\";\ninterface SearchPanelProps {\n  users: User[];\n  param: Partial<Pick<Project, \"name\" | \"personId\">>;\n  setParam: (param: SearchPanelProps[\"param\"]) => void;\n}\n\nexport const SearchPanel = ({ param, setParam }: SearchPanelProps) => {\n  return (\n    <Form style={{ marginBottom: \"2rem\" }} layout={\"inline\"}>\n      <Form.Item>\n        <Input\n          placeholder={\"È°πÁõÆÂêç\"}\n          type=\"text\"\n          value={param.name}\n          onChange={(evt) =>\n            setParam({\n              ...param,\n              name: evt.target.value,\n            })\n          }\n        ></Input>\n      </Form.Item>\n      <Form.Item>\n        <UserSelect\n          defaultOptionName={\"Ë¥üË¥£‰∫∫\"}\n          value={param.personId}\n          onChange={(value) => {\n            setParam({\n              ...param,\n              personId: value,\n            });\n          }}\n        ></UserSelect>\n      </Form.Item>\n    </Form>\n  );\n};\n","import { useDebounce, useDocumentTitle } from \"utils/index\";\nimport { List } from \"./list\";\nimport { SearchPanel } from \"./search-panel\";\nimport { useProjects } from \"utils/project\";\nimport { useUsers } from \"utils/user\";\nimport { useProjectModal, useProjectsSearchParams } from \"./util\";\nimport {\n  ButtonNoPadding,\n  ErrorBox,\n  Row,\n  ScreenContainer,\n} from \"components/lib\";\nimport React from \"react\";\n\nconst ProjectListScreen = React.memo(() => {\n  useDocumentTitle(\"È°πÁõÆÂàóË°®\", false);\n\n  const [param, setParam] = useProjectsSearchParams();\n  // Âè™ÂØπ name ÂèÇÊï∞ debounce\n  const debouncedName = useDebounce({ name: param.name }, 2000);\n\n  const {\n    isLoading,\n    error,\n    data: list,\n  } = useProjects({ ...param, ...debouncedName });\n\n  const { data: users } = useUsers();\n\n  const { open } = useProjectModal();\n\n  return (\n    <ScreenContainer>\n      <Row between={true}>\n        <h1>È°πÁõÆÂàóË°®</h1>\n        <ButtonNoPadding\n          type={\"primary\"}\n          style={{ opacity: \"0.8\", borderRadius: \"15px\" }}\n          size={\"large\"}\n          onClick={open}\n        >\n          ÂàõÂª∫È°πÁõÆ\n        </ButtonNoPadding>\n      </Row>\n\n      <SearchPanel users={users || []} param={param} setParam={setParam} />\n      <ErrorBox error={error} />\n      <List\n        loading={isLoading}\n        dataSource={list || []}\n        users={users || []}\n      ></List>\n    </ScreenContainer>\n  );\n});\n\nexport default ProjectListScreen;\n"],"sourceRoot":""}